<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IPTV Playlists with Multi-Player</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
        }
        .container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 16px;
            padding: 16px;
        }
        .playlist {
            background: #fff;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 16px;
            text-align: center;
        }
        .playlist img {
            max-width: 100px;
            max-height: 100px;
            border-radius: 50%;
            object-fit: cover;
            margin: 0 auto;
            display: block;
        }
        #videoContainer {
            width: 100%;
            height: auto;
            margin-bottom: 20px;
        }
        .player-switch {
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <div id="videoContainer"></div>
    <div class="player-switch">
        <button onclick="switchPlayer('dplayer')">DPlayer</button>
        <button onclick="switchPlayer('jsplayer')">JSPlayer</button>
        <button onclick="switchPlayer('dash')">Dash Player</button>
        <button onclick="switchPlayer('hls')">HLS Player</button>
    </div>
    <div class="container">
        <!-- Playlists will be inserted here by JavaScript -->
    </div>

    <script src="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/dashjs/dist/dash.all.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/hls.js/dist/hls.min.js"></script>
    <!-- Include other player libraries as needed -->

    <script>
        let currentPlayer = null;
        let currentUrl = null;

        async function fetchAndParseM3U() {
            const response = await fetch('https://iptv-org.github.io/iptv/languages/hin.m3u');
            const text = await response.text();
            const lines = text.split('\n');

            const playlists = [];
            let currentPlaylist = {};

            lines.forEach(line => {
                if (line.startsWith('#EXTINF:')) {
                    const info = line.split(',');
                    currentPlaylist.name = info[1];
                    const logoMatch = info[0].match(/tvg-logo="([^"]+)"/);
                    currentPlaylist.logo = logoMatch ? logoMatch[1] : 'default-logo.png'; // Fallback to a default logo if not found
                } else if (line.startsWith('http')) {
                    currentPlaylist.url = line;
                    playlists.push(currentPlaylist);
                    currentPlaylist = {};
                }
            });

            return playlists;
        }

        function createPlaylistElement(playlist) {
            const div = document.createElement('div');
            div.className = 'playlist';

            const img = document.createElement('img');
            img.src = playlist.logo;
            img.alt = playlist.name;
            div.appendChild(img);

            const name = document.createElement('div');
            name.textContent = playlist.name;
            div.appendChild(name);

            div.onclick = () => {
                currentUrl = playlist.url;
                switchPlayer('dplayer'); // Default player
            };

            return div;
        }

        function switchPlayer(type) {
            if (currentPlayer) {
                currentPlayer.destroy && currentPlayer.destroy();
            }

            const videoContainer = document.getElementById('videoContainer');
            videoContainer.innerHTML = '<video id="videoPlayer" controls></video>';
            const videoPlayer = document.getElementById('videoPlayer');

            switch (type) {
                case 'dplayer':
                    currentPlayer = new DPlayer({
                        container: videoContainer,
                        video: {
                            url: currentUrl,
                            type: 'hls'
                        }
                    });
                    break;
                case 'jsplayer':
                    // Simple HTML5 video player
                    videoPlayer.src = currentUrl;
                    currentPlayer = videoPlayer;
                    break;
                case 'dash':
                    currentPlayer = dashjs.MediaPlayer().create();
                    currentPlayer.initialize(videoPlayer, currentUrl, true);
                    break;
                case 'hls':
                    if (Hls.isSupported()) {
                        currentPlayer = new Hls();
                        currentPlayer.loadSource(currentUrl);
                        currentPlayer.attachMedia(videoPlayer);
                    }
                    break;
            }
        }

        async function main() {
            const playlists = await fetchAndParseM3U();
            const container = document.querySelector('.container');

            playlists.forEach(playlist => {
                const element = createPlaylistElement(playlist);
                container.appendChild(element);
            });
        }

        main();
    </script>
</body>
</html>



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IPTV Playlists with Multi-Player and Dropdowns</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
        }
        .container {
            padding: 16px;
        }
        #videoContainer {
            width: 100%;
            height: auto;
            margin-bottom: 20px;
        }
        .dropdown-container {
            margin-bottom: 20px;
        }
        .dropdown {
            display: inline-block;
            margin-right: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div id="videoContainer"></div>
        <div class="dropdown-container">
            <div class="dropdown">
                <label for="playerSelect">Select Player: </label>
                <select id="playerSelect" onchange="switchPlayer(this.value)">
                    <option value="dplayer">DPlayer</option>
                    <option value="jsplayer">JSPlayer</option>
                    <option value="dash">Dash Player</option>
                    <option value="hls">HLS Player</option>
                </select>
            </div>
            <div class="dropdown">
                <label for="channelSelect">Select Channel: </label>
                <select id="channelSelect" onchange="changeChannel(this.value)">
                    <!-- Channels will be populated by JavaScript -->
                </select>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/dashjs/dist/dash.all.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/hls.js/dist/hls.min.js"></script>
    <!-- Include other player libraries as needed -->

    <script>
        let currentPlayer = null;
        let currentUrl = null;

        async function fetchAndParseM3U() {
            const response = await fetch('https://iptv-org.github.io/iptv/index.m3u');
            const text = await response.text();
            const lines = text.split('\n');

            const playlists = [];
            let currentPlaylist = {};

            lines.forEach(line => {
                if (line.startsWith('#EXTINF:')) {
                    const info = line.split(',');
                    currentPlaylist.name = info[1];
                    const logoMatch = info[0].match(/tvg-logo="([^"]+)"/);
                    currentPlaylist.logo = logoMatch ? logoMatch[1] : 'default-logo.png'; // Fallback to a default logo if not found
                } else if (line.startsWith('http')) {
                    currentPlaylist.url = line;
                    playlists.push(currentPlaylist);
                    currentPlaylist = {};
                }
            });

            return playlists;
        }

        function populateChannelDropdown(playlists) {
            const channelSelect = document.getElementById('channelSelect');
            playlists.forEach((playlist, index) => {
                const option = document.createElement('option');
                option.value = playlist.url;
                option.textContent = playlist.name;
                channelSelect.appendChild(option);
            });

            // Automatically select the first channel
            if (playlists.length > 0) {
                currentUrl = playlists[0].url;
                channelSelect.value = currentUrl;
                switchPlayer(document.getElementById('playerSelect').value);
            }
        }

        function switchPlayer(type) {
            if (currentPlayer) {
                currentPlayer.destroy && currentPlayer.destroy();
            }

            const videoContainer = document.getElementById('videoContainer');
            videoContainer.innerHTML = '<video id="videoPlayer" controls></video>';
            const videoPlayer = document.getElementById('videoPlayer');

            switch (type) {
                case 'dplayer':
                    currentPlayer = new DPlayer({
                        container: videoContainer,
                        video: {
                            url: currentUrl,
                            type: 'hls'
                        }
                    });
                    break;
                case 'jsplayer':
                    // Simple HTML5 video player
                    videoPlayer.src = currentUrl;
                    currentPlayer = videoPlayer;
                    break;
                case 'dash':
                    currentPlayer = dashjs.MediaPlayer().create();
                    currentPlayer.initialize(videoPlayer, currentUrl, true);
                    break;
                case 'hls':
                    if (Hls.isSupported()) {
                        currentPlayer = new Hls();
                        currentPlayer.loadSource(currentUrl);
                        currentPlayer.attachMedia(videoPlayer);
                    }
                    break;
            }
        }

        function changeChannel(url) {
            currentUrl = url;
            switchPlayer(document.getElementById('playerSelect').value);
        }

        async function main() {
            const playlists = await fetchAndParseM3U();
            populateChannelDropdown(playlists);
        }

        main();
    </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IPTV Playlists with Multi-Player and Dropdowns</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
        }
        .container {
            padding: 16px;
        }
        #videoContainer {
            width: 100%;
            height: auto;
            margin-bottom: 20px;
        }
        .dropdown-container {
            margin-bottom: 20px;
        }
        .dropdown {
            display: inline-block;
            margin-right: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div id="videoContainer"></div>
        <div class="dropdown-container">
            <div class="dropdown">
                <label for="playerSelect">Select Player: </label>
                <select id="playerSelect" onchange="switchPlayer(this.value)">
                    <option value="dplayer">DPlayer</option>
                    <option value="jsplayer">JSPlayer</option>
                    <option value="dash">Dash Player</option>
                    <option value="hls">HLS Player</option>
                </select>
            </div>
            <div class="dropdown">
                <label for="channelSelect">Select Channel: </label>
                <select id="channelSelect" onchange="changeChannel(this.value)">
                    <!-- Channels will be populated by JavaScript -->
                </select>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/dashjs/dist/dash.all.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/hls.js/dist/hls.min.js"></script>
    <!-- Include other player libraries as needed -->

    <script>
        let currentPlayer = null;
        let currentUrl = null;

        async function fetchAndParseM3U() {
            const response = await fetch('https://iptv-org.github.io/iptv/index.m3u');
            const text = await response.text();
            const lines = text.split('\n');

            const playlists = [];
            let currentPlaylist = {};

            lines.forEach(line => {
                if (line.startsWith('#EXTINF:')) {
                    const info = line.split(',');
                    currentPlaylist.name = info[1];
                    const logoMatch = info[0].match(/tvg-logo="([^"]+)"/);
                    currentPlaylist.logo = logoMatch ? logoMatch[1] : 'default-logo.png'; // Fallback to a default logo if not found
                } else if (line.startsWith('http')) {
                    currentPlaylist.url = line;
                    playlists.push(currentPlaylist);
                    currentPlaylist = {};
                }
            });

            return playlists;
        }

        function populateChannelDropdown(playlists) {
            const channelSelect = document.getElementById('channelSelect');
            playlists.forEach((playlist, index) => {
                const option = document.createElement('option');
                option.value = playlist.url;
                option.textContent = playlist.name;
                channelSelect.appendChild(option);
            });

            // Automatically select the first channel
            if (playlists.length > 0) {
                currentUrl = playlists[0].url;
                channelSelect.value = currentUrl;
                switchPlayer(document.getElementById('playerSelect').value);
            }
        }

        function switchPlayer(type) {
            if (currentPlayer) {
                currentPlayer.destroy && currentPlayer.destroy();
            }

            const videoContainer = document.getElementById('videoContainer');
            videoContainer.innerHTML = '<video id="videoPlayer" controls></video>';
            const videoPlayer = document.getElementById('videoPlayer');

            switch (type) {
                case 'dplayer':
                    currentPlayer = new DPlayer({
                        container: videoContainer,
                        video: {
                            url: currentUrl,
                            type: 'hls'
                        }
                    });
                    break;
                case 'jsplayer':
                    // Simple HTML5 video player
                    videoPlayer.src = currentUrl;
                    currentPlayer = videoPlayer;
                    break;
                case 'dash':
                    currentPlayer = dashjs.MediaPlayer().create();
                    currentPlayer.initialize(videoPlayer, currentUrl, true);
                    break;
                case 'hls':
                    if (Hls.isSupported()) {
                        currentPlayer = new Hls();
                        currentPlayer.loadSource(currentUrl);
                        currentPlayer.attachMedia(videoPlayer);
                    }
                    break;
            }
        }

        function changeChannel(url) {
            currentUrl = url;
            switchPlayer(document.getElementById('playerSelect').value);
        }

        async function main() {
            const playlists = await fetchAndParseM3U();
            populateChannelDropdown(playlists);
        }

        main();
    </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IPTV Playlists with Multi-Player and Dropdowns</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
        }
        .container {
            padding: 16px;
        }
        #videoContainer {
            width: 100%;
            height: auto;
            margin-bottom: 20px;
        }
        .dropdown-container {
            margin-bottom: 20px;
        }
        .dropdown {
            display: inline-block;
            margin-right: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div id="videoContainer"></div>
        <div class="dropdown-container">
            <div class="dropdown">
                <label for="playerSelect">Select Player: </label>
                <select id="playerSelect" onchange="switchPlayer(this.value)">
                    <option value="dplayer">DPlayer</option>
                    <option value="jsplayer">JSPlayer</option>
                    <option value="dash">Dash Player</option>
                    <option value="hls">HLS Player</option>
                </select>
            </div>
            <div class="dropdown">
                <label for="channelSelect">Select Channel: </label>
                <select id="channelSelect" onchange="changeChannel(this.value)">
                    <!-- Channels will be populated by JavaScript -->
                </select>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/dashjs/dist/dash.all.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/hls.js/dist/hls.min.js"></script>
    <!-- Include other player libraries as needed -->

    <script>
        let currentPlayer = null;
        let currentUrl = null;

        async function fetchAndParseM3U() {
            const response = await fetch('https://iptv-org.github.io/iptv/index.m3u');
            const text = await response.text();
            const lines = text.split('\n');

            const playlists = [];
            let currentPlaylist = {};

            lines.forEach(line => {
                if (line.startsWith('#EXTINF:')) {
                    const info = line.split(',');
                    currentPlaylist.name = info[1];
                    const logoMatch = info[0].match(/tvg-logo="([^"]+)"/);
                    currentPlaylist.logo = logoMatch ? logoMatch[1] : 'default-logo.png'; // Fallback to a default logo if not found
                } else if (line.startsWith('http')) {
                    currentPlaylist.url = line;
                    playlists.push(currentPlaylist);
                    currentPlaylist = {};
                }
            });

            return playlists;
        }

        function populateChannelDropdown(playlists) {
            const channelSelect = document.getElementById('channelSelect');
            playlists.forEach((playlist, index) => {
                const option = document.createElement('option');
                option.value = playlist.url;
                option.textContent = playlist.name;
                channelSelect.appendChild(option);
            });

            // Automatically select the first channel
            if (playlists.length > 0) {
                currentUrl = playlists[0].url;
                channelSelect.value = currentUrl;
                switchPlayer(document.getElementById('playerSelect').value);
            }
        }

        function switchPlayer(type) {
            if (currentPlayer) {
                currentPlayer.destroy && currentPlayer.destroy();
            }

            const videoContainer = document.getElementById('videoContainer');
            videoContainer.innerHTML = '<video id="videoPlayer" controls></video>';
            const videoPlayer = document.getElementById('videoPlayer');

            switch (type) {
                case 'dplayer':
                    currentPlayer = new DPlayer({
                        container: videoContainer,
                        video: {
                            url: currentUrl,
                            type: 'hls'
                        }
                    });
                    break;
                case 'jsplayer':
                    // Simple HTML5 video player
                    videoPlayer.src = currentUrl;
                    currentPlayer = videoPlayer;
                    break;
                case 'dash':
                    currentPlayer = dashjs.MediaPlayer().create();
                    currentPlayer.initialize(videoPlayer, currentUrl, true);
                    break;
                case 'hls':
                    if (Hls.isSupported()) {
                        currentPlayer = new Hls();
                        currentPlayer.loadSource(currentUrl);
                        currentPlayer.attachMedia(videoPlayer);
                    }
                    break;
            }
        }

        function changeChannel(url) {
            currentUrl = url;
            switchPlayer(document.getElementById('playerSelect').value);
        }

        async function main() {
            const playlists = await fetchAndParseM3U();
            populateChannelDropdown(playlists);
        }

        main();
    </script>
</body>
</html>
